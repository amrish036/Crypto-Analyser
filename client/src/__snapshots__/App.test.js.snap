// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <WithStyles(CssBaseline) />,
        <div
          className="App"
        >
          <WithStyles(AppBar)
            position="static"
            style={
              Object {
                "alignItems": "center",
                "display": "top",
              }
            }
          >
            <WithStyles(Toolbar)>
              <pure(MoneyIcon) />
              <WithStyles(Typography)
                color="inherit"
                noWrap={true}
                variant="h6"
              >
                Crypto-Analyzer
              </WithStyles(Typography)>
            </WithStyles(Toolbar)>
          </WithStyles(AppBar)>
          <header
            className="App-header"
          >
            <div
              className="CardContainer"
            >
              <CurrencyQuoteCard
                quotes={
                  Object {
                    "currency": "BTC",
                    "date": "20180507",
                    "quotes": Array [
                      Object {
                        "price": "35.98",
                        "time": "0915",
                      },
                      Object {
                        "price": "36.13",
                        "time": "1045",
                      },
                      Object {
                        "price": "37.01",
                        "time": "1230",
                      },
                      Object {
                        "price": "35.98",
                        "time": "1400",
                      },
                      Object {
                        "price": "39.56",
                        "time": "1530",
                      },
                    ],
                  }
                }
              />
            </div>
            <div>
              <WithStyles(Button)
                color="primary"
                onClick={[Function]}
                style={
                  Object {
                    "margin": "20px",
                  }
                }
                variant="contained"
              >
                Refresh Quotes
              </WithStyles(Button)>
              <WithStyles(Button)
                color="primary"
                onClick={[Function]}
                style={
                  Object {
                    "margin": "20px",
                  }
                }
                variant="contained"
              >
                Filter
              </WithStyles(Button)>
              <WithStyles(Dialog)
                aria-labelledby="form-dialog-title"
                onClose={[Function]}
                open={false}
              >
                <WithStyles(DialogTitle)
                  id="form-dialog-title"
                >
                  Filter
                </WithStyles(DialogTitle)>
                <WithStyles(DialogContent)>
                  <WithStyles(DialogContentText)>
                    Filter based on date
                  </WithStyles(DialogContentText)>
                  <TextField
                    autoFocus={true}
                    fullWidth={true}
                    id="date"
                    margin="dense"
                    onChange={[Function]}
                    required={false}
                    select={false}
                    type="date"
                    variant="standard"
                  />
                  <WithStyles(DialogContentText)>
                    Filter based on Currency
                  </WithStyles(DialogContentText)>
                  <TextField
                    autoFocus={true}
                    fullWidth={true}
                    id="currencyText"
                    margin="dense"
                    onChange={[Function]}
                    placeholder="Type Currency eg. ETC"
                    required={false}
                    select={false}
                    type="text"
                    variant="standard"
                  />
                </WithStyles(DialogContent)>
                <WithStyles(DialogActions)>
                  <WithStyles(Button)
                    color="primary"
                    onClick={[Function]}
                  >
                    Cancel
                  </WithStyles(Button)>
                  <WithStyles(Button)
                    color="primary"
                    onClick={[Function]}
                  >
                    Ok
                  </WithStyles(Button)>
                </WithStyles(DialogActions)>
              </WithStyles(Dialog)>
            </div>
          </header>
          <footer>
            <WithStyles(Typography)
              align="center"
              color="inherit"
              variant="h6"
            >
              Crypto-Analyzer 2018 Â©
            </WithStyles(Typography)>
          </footer>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <WithStyles(AppBar)
              position="static"
              style={
                Object {
                  "alignItems": "center",
                  "display": "top",
                }
              }
            >
              <WithStyles(Toolbar)>
                <pure(MoneyIcon) />
                <WithStyles(Typography)
                  color="inherit"
                  noWrap={true}
                  variant="h6"
                >
                  Crypto-Analyzer
                </WithStyles(Typography)>
              </WithStyles(Toolbar)>
            </WithStyles(AppBar)>,
            <header
              className="App-header"
            >
              <div
                className="CardContainer"
              >
                <CurrencyQuoteCard
                  quotes={
                    Object {
                      "currency": "BTC",
                      "date": "20180507",
                      "quotes": Array [
                        Object {
                          "price": "35.98",
                          "time": "0915",
                        },
                        Object {
                          "price": "36.13",
                          "time": "1045",
                        },
                        Object {
                          "price": "37.01",
                          "time": "1230",
                        },
                        Object {
                          "price": "35.98",
                          "time": "1400",
                        },
                        Object {
                          "price": "39.56",
                          "time": "1530",
                        },
                      ],
                    }
                  }
                />
              </div>
              <div>
                <WithStyles(Button)
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "margin": "20px",
                    }
                  }
                  variant="contained"
                >
                  Refresh Quotes
                </WithStyles(Button)>
                <WithStyles(Button)
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "margin": "20px",
                    }
                  }
                  variant="contained"
                >
                  Filter
                </WithStyles(Button)>
                <WithStyles(Dialog)
                  aria-labelledby="form-dialog-title"
                  onClose={[Function]}
                  open={false}
                >
                  <WithStyles(DialogTitle)
                    id="form-dialog-title"
                  >
                    Filter
                  </WithStyles(DialogTitle)>
                  <WithStyles(DialogContent)>
                    <WithStyles(DialogContentText)>
                      Filter based on date
                    </WithStyles(DialogContentText)>
                    <TextField
                      autoFocus={true}
                      fullWidth={true}
                      id="date"
                      margin="dense"
                      onChange={[Function]}
                      required={false}
                      select={false}
                      type="date"
                      variant="standard"
                    />
                    <WithStyles(DialogContentText)>
                      Filter based on Currency
                    </WithStyles(DialogContentText)>
                    <TextField
                      autoFocus={true}
                      fullWidth={true}
                      id="currencyText"
                      margin="dense"
                      onChange={[Function]}
                      placeholder="Type Currency eg. ETC"
                      required={false}
                      select={false}
                      type="text"
                      variant="standard"
                    />
                  </WithStyles(DialogContent)>
                  <WithStyles(DialogActions)>
                    <WithStyles(Button)
                      color="primary"
                      onClick={[Function]}
                    >
                      Cancel
                    </WithStyles(Button)>
                    <WithStyles(Button)
                      color="primary"
                      onClick={[Function]}
                    >
                      Ok
                    </WithStyles(Button)>
                  </WithStyles(DialogActions)>
                </WithStyles(Dialog)>
              </div>
            </header>,
            <footer>
              <WithStyles(Typography)
                align="center"
                color="inherit"
                variant="h6"
              >
                Crypto-Analyzer 2018 Â©
              </WithStyles(Typography)>
            </footer>,
          ],
          "className": "App",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(Toolbar)>
                <pure(MoneyIcon) />
                <WithStyles(Typography)
                  color="inherit"
                  noWrap={true}
                  variant="h6"
                >
                  Crypto-Analyzer
                </WithStyles(Typography)>
              </WithStyles(Toolbar)>,
              "position": "static",
              "style": Object {
                "alignItems": "center",
                "display": "top",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <pure(MoneyIcon) />,
                  <WithStyles(Typography)
                    color="inherit"
                    noWrap={true}
                    variant="h6"
                  >
                    Crypto-Analyzer
                  </WithStyles(Typography)>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Crypto-Analyzer",
                    "color": "inherit",
                    "noWrap": true,
                    "variant": "h6",
                  },
                  "ref": null,
                  "rendered": "Crypto-Analyzer",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="CardContainer"
                >
                  <CurrencyQuoteCard
                    quotes={
                      Object {
                        "currency": "BTC",
                        "date": "20180507",
                        "quotes": Array [
                          Object {
                            "price": "35.98",
                            "time": "0915",
                          },
                          Object {
                            "price": "36.13",
                            "time": "1045",
                          },
                          Object {
                            "price": "37.01",
                            "time": "1230",
                          },
                          Object {
                            "price": "35.98",
                            "time": "1400",
                          },
                          Object {
                            "price": "39.56",
                            "time": "1530",
                          },
                        ],
                      }
                    }
                  />
                </div>,
                <div>
                  <WithStyles(Button)
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "margin": "20px",
                      }
                    }
                    variant="contained"
                  >
                    Refresh Quotes
                  </WithStyles(Button)>
                  <WithStyles(Button)
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "margin": "20px",
                      }
                    }
                    variant="contained"
                  >
                    Filter
                  </WithStyles(Button)>
                  <WithStyles(Dialog)
                    aria-labelledby="form-dialog-title"
                    onClose={[Function]}
                    open={false}
                  >
                    <WithStyles(DialogTitle)
                      id="form-dialog-title"
                    >
                      Filter
                    </WithStyles(DialogTitle)>
                    <WithStyles(DialogContent)>
                      <WithStyles(DialogContentText)>
                        Filter based on date
                      </WithStyles(DialogContentText)>
                      <TextField
                        autoFocus={true}
                        fullWidth={true}
                        id="date"
                        margin="dense"
                        onChange={[Function]}
                        required={false}
                        select={false}
                        type="date"
                        variant="standard"
                      />
                      <WithStyles(DialogContentText)>
                        Filter based on Currency
                      </WithStyles(DialogContentText)>
                      <TextField
                        autoFocus={true}
                        fullWidth={true}
                        id="currencyText"
                        margin="dense"
                        onChange={[Function]}
                        placeholder="Type Currency eg. ETC"
                        required={false}
                        select={false}
                        type="text"
                        variant="standard"
                      />
                    </WithStyles(DialogContent)>
                    <WithStyles(DialogActions)>
                      <WithStyles(Button)
                        color="primary"
                        onClick={[Function]}
                      >
                        Cancel
                      </WithStyles(Button)>
                      <WithStyles(Button)
                        color="primary"
                        onClick={[Function]}
                      >
                        Ok
                      </WithStyles(Button)>
                    </WithStyles(DialogActions)>
                  </WithStyles(Dialog)>
                </div>,
              ],
              "className": "App-header",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    Array [
                      <CurrencyQuoteCard
                        quotes={
                          Object {
                            "currency": "BTC",
                            "date": "20180507",
                            "quotes": Array [
                              Object {
                                "price": "35.98",
                                "time": "0915",
                              },
                              Object {
                                "price": "36.13",
                                "time": "1045",
                              },
                              Object {
                                "price": "37.01",
                                "time": "1230",
                              },
                              Object {
                                "price": "35.98",
                                "time": "1400",
                              },
                              Object {
                                "price": "39.56",
                                "time": "1530",
                              },
                            ],
                          }
                        }
                      />,
                    ],
                    undefined,
                  ],
                  "className": "CardContainer",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "quotes": Object {
                        "currency": "BTC",
                        "date": "20180507",
                        "quotes": Array [
                          Object {
                            "price": "35.98",
                            "time": "0915",
                          },
                          Object {
                            "price": "36.13",
                            "time": "1045",
                          },
                          Object {
                            "price": "37.01",
                            "time": "1230",
                          },
                          Object {
                            "price": "35.98",
                            "time": "1400",
                          },
                          Object {
                            "price": "39.56",
                            "time": "1530",
                          },
                        ],
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  undefined,
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <WithStyles(Button)
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "margin": "20px",
                        }
                      }
                      variant="contained"
                    >
                      Refresh Quotes
                    </WithStyles(Button)>,
                    <WithStyles(Button)
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "margin": "20px",
                        }
                      }
                      variant="contained"
                    >
                      Filter
                    </WithStyles(Button)>,
                    <WithStyles(Dialog)
                      aria-labelledby="form-dialog-title"
                      onClose={[Function]}
                      open={false}
                    >
                      <WithStyles(DialogTitle)
                        id="form-dialog-title"
                      >
                        Filter
                      </WithStyles(DialogTitle)>
                      <WithStyles(DialogContent)>
                        <WithStyles(DialogContentText)>
                          Filter based on date
                        </WithStyles(DialogContentText)>
                        <TextField
                          autoFocus={true}
                          fullWidth={true}
                          id="date"
                          margin="dense"
                          onChange={[Function]}
                          required={false}
                          select={false}
                          type="date"
                          variant="standard"
                        />
                        <WithStyles(DialogContentText)>
                          Filter based on Currency
                        </WithStyles(DialogContentText)>
                        <TextField
                          autoFocus={true}
                          fullWidth={true}
                          id="currencyText"
                          margin="dense"
                          onChange={[Function]}
                          placeholder="Type Currency eg. ETC"
                          required={false}
                          select={false}
                          type="text"
                          variant="standard"
                        />
                      </WithStyles(DialogContent)>
                      <WithStyles(DialogActions)>
                        <WithStyles(Button)
                          color="primary"
                          onClick={[Function]}
                        >
                          Cancel
                        </WithStyles(Button)>
                        <WithStyles(Button)
                          color="primary"
                          onClick={[Function]}
                        >
                          Ok
                        </WithStyles(Button)>
                      </WithStyles(DialogActions)>
                    </WithStyles(Dialog)>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Refresh Quotes",
                      "color": "primary",
                      "onClick": [Function],
                      "style": Object {
                        "margin": "20px",
                      },
                      "variant": "contained",
                    },
                    "ref": null,
                    "rendered": "Refresh Quotes",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Filter",
                      "color": "primary",
                      "onClick": [Function],
                      "style": Object {
                        "margin": "20px",
                      },
                      "variant": "contained",
                    },
                    "ref": null,
                    "rendered": "Filter",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "aria-labelledby": "form-dialog-title",
                      "children": Array [
                        <WithStyles(DialogTitle)
                          id="form-dialog-title"
                        >
                          Filter
                        </WithStyles(DialogTitle)>,
                        <WithStyles(DialogContent)>
                          <WithStyles(DialogContentText)>
                            Filter based on date
                          </WithStyles(DialogContentText)>
                          <TextField
                            autoFocus={true}
                            fullWidth={true}
                            id="date"
                            margin="dense"
                            onChange={[Function]}
                            required={false}
                            select={false}
                            type="date"
                            variant="standard"
                          />
                          <WithStyles(DialogContentText)>
                            Filter based on Currency
                          </WithStyles(DialogContentText)>
                          <TextField
                            autoFocus={true}
                            fullWidth={true}
                            id="currencyText"
                            margin="dense"
                            onChange={[Function]}
                            placeholder="Type Currency eg. ETC"
                            required={false}
                            select={false}
                            type="text"
                            variant="standard"
                          />
                        </WithStyles(DialogContent)>,
                        <WithStyles(DialogActions)>
                          <WithStyles(Button)
                            color="primary"
                            onClick={[Function]}
                          >
                            Cancel
                          </WithStyles(Button)>
                          <WithStyles(Button)
                            color="primary"
                            onClick={[Function]}
                          >
                            Ok
                          </WithStyles(Button)>
                        </WithStyles(DialogActions)>,
                      ],
                      "onClose": [Function],
                      "open": false,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": "Filter",
                          "id": "form-dialog-title",
                        },
                        "ref": null,
                        "rendered": "Filter",
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": Array [
                            <WithStyles(DialogContentText)>
                              Filter based on date
                            </WithStyles(DialogContentText)>,
                            <TextField
                              autoFocus={true}
                              fullWidth={true}
                              id="date"
                              margin="dense"
                              onChange={[Function]}
                              required={false}
                              select={false}
                              type="date"
                              variant="standard"
                            />,
                            <WithStyles(DialogContentText)>
                              Filter based on Currency
                            </WithStyles(DialogContentText)>,
                            <TextField
                              autoFocus={true}
                              fullWidth={true}
                              id="currencyText"
                              margin="dense"
                              onChange={[Function]}
                              placeholder="Type Currency eg. ETC"
                              required={false}
                              select={false}
                              type="text"
                              variant="standard"
                            />,
                          ],
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "children": "Filter based on date",
                            },
                            "ref": null,
                            "rendered": "Filter based on date",
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "autoFocus": true,
                              "fullWidth": true,
                              "id": "date",
                              "margin": "dense",
                              "onChange": [Function],
                              "required": false,
                              "select": false,
                              "type": "date",
                              "variant": "standard",
                            },
                            "ref": null,
                            "rendered": null,
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "children": "Filter based on Currency",
                            },
                            "ref": null,
                            "rendered": "Filter based on Currency",
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "autoFocus": true,
                              "fullWidth": true,
                              "id": "currencyText",
                              "margin": "dense",
                              "onChange": [Function],
                              "placeholder": "Type Currency eg. ETC",
                              "required": false,
                              "select": false,
                              "type": "text",
                              "variant": "standard",
                            },
                            "ref": null,
                            "rendered": null,
                            "type": [Function],
                          },
                        ],
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": Array [
                            <WithStyles(Button)
                              color="primary"
                              onClick={[Function]}
                            >
                              Cancel
                            </WithStyles(Button)>,
                            <WithStyles(Button)
                              color="primary"
                              onClick={[Function]}
                            >
                              Ok
                            </WithStyles(Button)>,
                          ],
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "children": "Cancel",
                              "color": "primary",
                              "onClick": [Function],
                            },
                            "ref": null,
                            "rendered": "Cancel",
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "children": "Ok",
                              "color": "primary",
                              "onClick": [Function],
                            },
                            "ref": null,
                            "rendered": "Ok",
                            "type": [Function],
                          },
                        ],
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
            ],
            "type": "header",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <WithStyles(Typography)
                align="center"
                color="inherit"
                variant="h6"
              >
                Crypto-Analyzer 2018 Â©
              </WithStyles(Typography)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "align": "center",
                "children": "Crypto-Analyzer 2018 Â©",
                "color": "inherit",
                "variant": "h6",
              },
              "ref": null,
              "rendered": "Crypto-Analyzer 2018 Â©",
              "type": [Function],
            },
            "type": "footer",
          },
        ],
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <WithStyles(CssBaseline) />,
          <div
            className="App"
          >
            <WithStyles(AppBar)
              position="static"
              style={
                Object {
                  "alignItems": "center",
                  "display": "top",
                }
              }
            >
              <WithStyles(Toolbar)>
                <pure(MoneyIcon) />
                <WithStyles(Typography)
                  color="inherit"
                  noWrap={true}
                  variant="h6"
                >
                  Crypto-Analyzer
                </WithStyles(Typography)>
              </WithStyles(Toolbar)>
            </WithStyles(AppBar)>
            <header
              className="App-header"
            >
              <div
                className="CardContainer"
              >
                <CurrencyQuoteCard
                  quotes={
                    Object {
                      "currency": "BTC",
                      "date": "20180507",
                      "quotes": Array [
                        Object {
                          "price": "35.98",
                          "time": "0915",
                        },
                        Object {
                          "price": "36.13",
                          "time": "1045",
                        },
                        Object {
                          "price": "37.01",
                          "time": "1230",
                        },
                        Object {
                          "price": "35.98",
                          "time": "1400",
                        },
                        Object {
                          "price": "39.56",
                          "time": "1530",
                        },
                      ],
                    }
                  }
                />
              </div>
              <div>
                <WithStyles(Button)
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "margin": "20px",
                    }
                  }
                  variant="contained"
                >
                  Refresh Quotes
                </WithStyles(Button)>
                <WithStyles(Button)
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "margin": "20px",
                    }
                  }
                  variant="contained"
                >
                  Filter
                </WithStyles(Button)>
                <WithStyles(Dialog)
                  aria-labelledby="form-dialog-title"
                  onClose={[Function]}
                  open={false}
                >
                  <WithStyles(DialogTitle)
                    id="form-dialog-title"
                  >
                    Filter
                  </WithStyles(DialogTitle)>
                  <WithStyles(DialogContent)>
                    <WithStyles(DialogContentText)>
                      Filter based on date
                    </WithStyles(DialogContentText)>
                    <TextField
                      autoFocus={true}
                      fullWidth={true}
                      id="date"
                      margin="dense"
                      onChange={[Function]}
                      required={false}
                      select={false}
                      type="date"
                      variant="standard"
                    />
                    <WithStyles(DialogContentText)>
                      Filter based on Currency
                    </WithStyles(DialogContentText)>
                    <TextField
                      autoFocus={true}
                      fullWidth={true}
                      id="currencyText"
                      margin="dense"
                      onChange={[Function]}
                      placeholder="Type Currency eg. ETC"
                      required={false}
                      select={false}
                      type="text"
                      variant="standard"
                    />
                  </WithStyles(DialogContent)>
                  <WithStyles(DialogActions)>
                    <WithStyles(Button)
                      color="primary"
                      onClick={[Function]}
                    >
                      Cancel
                    </WithStyles(Button)>
                    <WithStyles(Button)
                      color="primary"
                      onClick={[Function]}
                    >
                      Ok
                    </WithStyles(Button)>
                  </WithStyles(DialogActions)>
                </WithStyles(Dialog)>
              </div>
            </header>
            <footer>
              <WithStyles(Typography)
                align="center"
                color="inherit"
                variant="h6"
              >
                Crypto-Analyzer 2018 Â©
              </WithStyles(Typography)>
            </footer>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <WithStyles(AppBar)
                position="static"
                style={
                  Object {
                    "alignItems": "center",
                    "display": "top",
                  }
                }
              >
                <WithStyles(Toolbar)>
                  <pure(MoneyIcon) />
                  <WithStyles(Typography)
                    color="inherit"
                    noWrap={true}
                    variant="h6"
                  >
                    Crypto-Analyzer
                  </WithStyles(Typography)>
                </WithStyles(Toolbar)>
              </WithStyles(AppBar)>,
              <header
                className="App-header"
              >
                <div
                  className="CardContainer"
                >
                  <CurrencyQuoteCard
                    quotes={
                      Object {
                        "currency": "BTC",
                        "date": "20180507",
                        "quotes": Array [
                          Object {
                            "price": "35.98",
                            "time": "0915",
                          },
                          Object {
                            "price": "36.13",
                            "time": "1045",
                          },
                          Object {
                            "price": "37.01",
                            "time": "1230",
                          },
                          Object {
                            "price": "35.98",
                            "time": "1400",
                          },
                          Object {
                            "price": "39.56",
                            "time": "1530",
                          },
                        ],
                      }
                    }
                  />
                </div>
                <div>
                  <WithStyles(Button)
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "margin": "20px",
                      }
                    }
                    variant="contained"
                  >
                    Refresh Quotes
                  </WithStyles(Button)>
                  <WithStyles(Button)
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "margin": "20px",
                      }
                    }
                    variant="contained"
                  >
                    Filter
                  </WithStyles(Button)>
                  <WithStyles(Dialog)
                    aria-labelledby="form-dialog-title"
                    onClose={[Function]}
                    open={false}
                  >
                    <WithStyles(DialogTitle)
                      id="form-dialog-title"
                    >
                      Filter
                    </WithStyles(DialogTitle)>
                    <WithStyles(DialogContent)>
                      <WithStyles(DialogContentText)>
                        Filter based on date
                      </WithStyles(DialogContentText)>
                      <TextField
                        autoFocus={true}
                        fullWidth={true}
                        id="date"
                        margin="dense"
                        onChange={[Function]}
                        required={false}
                        select={false}
                        type="date"
                        variant="standard"
                      />
                      <WithStyles(DialogContentText)>
                        Filter based on Currency
                      </WithStyles(DialogContentText)>
                      <TextField
                        autoFocus={true}
                        fullWidth={true}
                        id="currencyText"
                        margin="dense"
                        onChange={[Function]}
                        placeholder="Type Currency eg. ETC"
                        required={false}
                        select={false}
                        type="text"
                        variant="standard"
                      />
                    </WithStyles(DialogContent)>
                    <WithStyles(DialogActions)>
                      <WithStyles(Button)
                        color="primary"
                        onClick={[Function]}
                      >
                        Cancel
                      </WithStyles(Button)>
                      <WithStyles(Button)
                        color="primary"
                        onClick={[Function]}
                      >
                        Ok
                      </WithStyles(Button)>
                    </WithStyles(DialogActions)>
                  </WithStyles(Dialog)>
                </div>
              </header>,
              <footer>
                <WithStyles(Typography)
                  align="center"
                  color="inherit"
                  variant="h6"
                >
                  Crypto-Analyzer 2018 Â©
                </WithStyles(Typography)>
              </footer>,
            ],
            "className": "App",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(Toolbar)>
                  <pure(MoneyIcon) />
                  <WithStyles(Typography)
                    color="inherit"
                    noWrap={true}
                    variant="h6"
                  >
                    Crypto-Analyzer
                  </WithStyles(Typography)>
                </WithStyles(Toolbar)>,
                "position": "static",
                "style": Object {
                  "alignItems": "center",
                  "display": "top",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <pure(MoneyIcon) />,
                    <WithStyles(Typography)
                      color="inherit"
                      noWrap={true}
                      variant="h6"
                    >
                      Crypto-Analyzer
                    </WithStyles(Typography)>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Crypto-Analyzer",
                      "color": "inherit",
                      "noWrap": true,
                      "variant": "h6",
                    },
                    "ref": null,
                    "rendered": "Crypto-Analyzer",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="CardContainer"
                  >
                    <CurrencyQuoteCard
                      quotes={
                        Object {
                          "currency": "BTC",
                          "date": "20180507",
                          "quotes": Array [
                            Object {
                              "price": "35.98",
                              "time": "0915",
                            },
                            Object {
                              "price": "36.13",
                              "time": "1045",
                            },
                            Object {
                              "price": "37.01",
                              "time": "1230",
                            },
                            Object {
                              "price": "35.98",
                              "time": "1400",
                            },
                            Object {
                              "price": "39.56",
                              "time": "1530",
                            },
                          ],
                        }
                      }
                    />
                  </div>,
                  <div>
                    <WithStyles(Button)
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "margin": "20px",
                        }
                      }
                      variant="contained"
                    >
                      Refresh Quotes
                    </WithStyles(Button)>
                    <WithStyles(Button)
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "margin": "20px",
                        }
                      }
                      variant="contained"
                    >
                      Filter
                    </WithStyles(Button)>
                    <WithStyles(Dialog)
                      aria-labelledby="form-dialog-title"
                      onClose={[Function]}
                      open={false}
                    >
                      <WithStyles(DialogTitle)
                        id="form-dialog-title"
                      >
                        Filter
                      </WithStyles(DialogTitle)>
                      <WithStyles(DialogContent)>
                        <WithStyles(DialogContentText)>
                          Filter based on date
                        </WithStyles(DialogContentText)>
                        <TextField
                          autoFocus={true}
                          fullWidth={true}
                          id="date"
                          margin="dense"
                          onChange={[Function]}
                          required={false}
                          select={false}
                          type="date"
                          variant="standard"
                        />
                        <WithStyles(DialogContentText)>
                          Filter based on Currency
                        </WithStyles(DialogContentText)>
                        <TextField
                          autoFocus={true}
                          fullWidth={true}
                          id="currencyText"
                          margin="dense"
                          onChange={[Function]}
                          placeholder="Type Currency eg. ETC"
                          required={false}
                          select={false}
                          type="text"
                          variant="standard"
                        />
                      </WithStyles(DialogContent)>
                      <WithStyles(DialogActions)>
                        <WithStyles(Button)
                          color="primary"
                          onClick={[Function]}
                        >
                          Cancel
                        </WithStyles(Button)>
                        <WithStyles(Button)
                          color="primary"
                          onClick={[Function]}
                        >
                          Ok
                        </WithStyles(Button)>
                      </WithStyles(DialogActions)>
                    </WithStyles(Dialog)>
                  </div>,
                ],
                "className": "App-header",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      Array [
                        <CurrencyQuoteCard
                          quotes={
                            Object {
                              "currency": "BTC",
                              "date": "20180507",
                              "quotes": Array [
                                Object {
                                  "price": "35.98",
                                  "time": "0915",
                                },
                                Object {
                                  "price": "36.13",
                                  "time": "1045",
                                },
                                Object {
                                  "price": "37.01",
                                  "time": "1230",
                                },
                                Object {
                                  "price": "35.98",
                                  "time": "1400",
                                },
                                Object {
                                  "price": "39.56",
                                  "time": "1530",
                                },
                              ],
                            }
                          }
                        />,
                      ],
                      undefined,
                    ],
                    "className": "CardContainer",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "quotes": Object {
                          "currency": "BTC",
                          "date": "20180507",
                          "quotes": Array [
                            Object {
                              "price": "35.98",
                              "time": "0915",
                            },
                            Object {
                              "price": "36.13",
                              "time": "1045",
                            },
                            Object {
                              "price": "37.01",
                              "time": "1230",
                            },
                            Object {
                              "price": "35.98",
                              "time": "1400",
                            },
                            Object {
                              "price": "39.56",
                              "time": "1530",
                            },
                          ],
                        },
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    undefined,
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <WithStyles(Button)
                        color="primary"
                        onClick={[Function]}
                        style={
                          Object {
                            "margin": "20px",
                          }
                        }
                        variant="contained"
                      >
                        Refresh Quotes
                      </WithStyles(Button)>,
                      <WithStyles(Button)
                        color="primary"
                        onClick={[Function]}
                        style={
                          Object {
                            "margin": "20px",
                          }
                        }
                        variant="contained"
                      >
                        Filter
                      </WithStyles(Button)>,
                      <WithStyles(Dialog)
                        aria-labelledby="form-dialog-title"
                        onClose={[Function]}
                        open={false}
                      >
                        <WithStyles(DialogTitle)
                          id="form-dialog-title"
                        >
                          Filter
                        </WithStyles(DialogTitle)>
                        <WithStyles(DialogContent)>
                          <WithStyles(DialogContentText)>
                            Filter based on date
                          </WithStyles(DialogContentText)>
                          <TextField
                            autoFocus={true}
                            fullWidth={true}
                            id="date"
                            margin="dense"
                            onChange={[Function]}
                            required={false}
                            select={false}
                            type="date"
                            variant="standard"
                          />
                          <WithStyles(DialogContentText)>
                            Filter based on Currency
                          </WithStyles(DialogContentText)>
                          <TextField
                            autoFocus={true}
                            fullWidth={true}
                            id="currencyText"
                            margin="dense"
                            onChange={[Function]}
                            placeholder="Type Currency eg. ETC"
                            required={false}
                            select={false}
                            type="text"
                            variant="standard"
                          />
                        </WithStyles(DialogContent)>
                        <WithStyles(DialogActions)>
                          <WithStyles(Button)
                            color="primary"
                            onClick={[Function]}
                          >
                            Cancel
                          </WithStyles(Button)>
                          <WithStyles(Button)
                            color="primary"
                            onClick={[Function]}
                          >
                            Ok
                          </WithStyles(Button)>
                        </WithStyles(DialogActions)>
                      </WithStyles(Dialog)>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Refresh Quotes",
                        "color": "primary",
                        "onClick": [Function],
                        "style": Object {
                          "margin": "20px",
                        },
                        "variant": "contained",
                      },
                      "ref": null,
                      "rendered": "Refresh Quotes",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Filter",
                        "color": "primary",
                        "onClick": [Function],
                        "style": Object {
                          "margin": "20px",
                        },
                        "variant": "contained",
                      },
                      "ref": null,
                      "rendered": "Filter",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "aria-labelledby": "form-dialog-title",
                        "children": Array [
                          <WithStyles(DialogTitle)
                            id="form-dialog-title"
                          >
                            Filter
                          </WithStyles(DialogTitle)>,
                          <WithStyles(DialogContent)>
                            <WithStyles(DialogContentText)>
                              Filter based on date
                            </WithStyles(DialogContentText)>
                            <TextField
                              autoFocus={true}
                              fullWidth={true}
                              id="date"
                              margin="dense"
                              onChange={[Function]}
                              required={false}
                              select={false}
                              type="date"
                              variant="standard"
                            />
                            <WithStyles(DialogContentText)>
                              Filter based on Currency
                            </WithStyles(DialogContentText)>
                            <TextField
                              autoFocus={true}
                              fullWidth={true}
                              id="currencyText"
                              margin="dense"
                              onChange={[Function]}
                              placeholder="Type Currency eg. ETC"
                              required={false}
                              select={false}
                              type="text"
                              variant="standard"
                            />
                          </WithStyles(DialogContent)>,
                          <WithStyles(DialogActions)>
                            <WithStyles(Button)
                              color="primary"
                              onClick={[Function]}
                            >
                              Cancel
                            </WithStyles(Button)>
                            <WithStyles(Button)
                              color="primary"
                              onClick={[Function]}
                            >
                              Ok
                            </WithStyles(Button)>
                          </WithStyles(DialogActions)>,
                        ],
                        "onClose": [Function],
                        "open": false,
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "children": "Filter",
                            "id": "form-dialog-title",
                          },
                          "ref": null,
                          "rendered": "Filter",
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "children": Array [
                              <WithStyles(DialogContentText)>
                                Filter based on date
                              </WithStyles(DialogContentText)>,
                              <TextField
                                autoFocus={true}
                                fullWidth={true}
                                id="date"
                                margin="dense"
                                onChange={[Function]}
                                required={false}
                                select={false}
                                type="date"
                                variant="standard"
                              />,
                              <WithStyles(DialogContentText)>
                                Filter based on Currency
                              </WithStyles(DialogContentText)>,
                              <TextField
                                autoFocus={true}
                                fullWidth={true}
                                id="currencyText"
                                margin="dense"
                                onChange={[Function]}
                                placeholder="Type Currency eg. ETC"
                                required={false}
                                select={false}
                                type="text"
                                variant="standard"
                              />,
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "class",
                              "props": Object {
                                "children": "Filter based on date",
                              },
                              "ref": null,
                              "rendered": "Filter based on date",
                              "type": [Function],
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "class",
                              "props": Object {
                                "autoFocus": true,
                                "fullWidth": true,
                                "id": "date",
                                "margin": "dense",
                                "onChange": [Function],
                                "required": false,
                                "select": false,
                                "type": "date",
                                "variant": "standard",
                              },
                              "ref": null,
                              "rendered": null,
                              "type": [Function],
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "class",
                              "props": Object {
                                "children": "Filter based on Currency",
                              },
                              "ref": null,
                              "rendered": "Filter based on Currency",
                              "type": [Function],
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "class",
                              "props": Object {
                                "autoFocus": true,
                                "fullWidth": true,
                                "id": "currencyText",
                                "margin": "dense",
                                "onChange": [Function],
                                "placeholder": "Type Currency eg. ETC",
                                "required": false,
                                "select": false,
                                "type": "text",
                                "variant": "standard",
                              },
                              "ref": null,
                              "rendered": null,
                              "type": [Function],
                            },
                          ],
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "children": Array [
                              <WithStyles(Button)
                                color="primary"
                                onClick={[Function]}
                              >
                                Cancel
                              </WithStyles(Button)>,
                              <WithStyles(Button)
                                color="primary"
                                onClick={[Function]}
                              >
                                Ok
                              </WithStyles(Button)>,
                            ],
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "class",
                              "props": Object {
                                "children": "Cancel",
                                "color": "primary",
                                "onClick": [Function],
                              },
                              "ref": null,
                              "rendered": "Cancel",
                              "type": [Function],
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "class",
                              "props": Object {
                                "children": "Ok",
                                "color": "primary",
                                "onClick": [Function],
                              },
                              "ref": null,
                              "rendered": "Ok",
                              "type": [Function],
                            },
                          ],
                          "type": [Function],
                        },
                      ],
                      "type": [Function],
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "header",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <WithStyles(Typography)
                  align="center"
                  color="inherit"
                  variant="h6"
                >
                  Crypto-Analyzer 2018 Â©
                </WithStyles(Typography)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "align": "center",
                  "children": "Crypto-Analyzer 2018 Â©",
                  "color": "inherit",
                  "variant": "h6",
                },
                "ref": null,
                "rendered": "Crypto-Analyzer 2018 Â©",
                "type": [Function],
              },
              "type": "footer",
            },
          ],
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
