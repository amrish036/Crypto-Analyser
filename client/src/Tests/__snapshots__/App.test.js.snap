// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> should match the App component snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <WithStyles(CssBaseline) />,
        <div
          className="App"
        >
          <AppBarComponent />
          <header
            className="App-header"
          >
            <div
              className="CardContainer"
            >
              <WithStyles(Typography)
                color="inherit"
                noWrap={true}
                variant="h6"
              >
                No Quote Found, try another Date or Currency
              </WithStyles(Typography)>
            </div>
            <div>
              <WithStyles(Button)
                className="refreshButton"
                color="primary"
                onClick={[Function]}
                style={
                  Object {
                    "margin": "20px",
                  }
                }
                variant="contained"
              >
                Refresh Quotes
              </WithStyles(Button)>
              <WithStyles(Button)
                className="filterButton"
                color="primary"
                onClick={[Function]}
                style={
                  Object {
                    "margin": "20px",
                  }
                }
                variant="contained"
              >
                Filter
              </WithStyles(Button)>
              <React.Fragment />
            </div>
          </header>
          <FooterComponent />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <AppBarComponent />,
            <header
              className="App-header"
            >
              <div
                className="CardContainer"
              >
                <WithStyles(Typography)
                  color="inherit"
                  noWrap={true}
                  variant="h6"
                >
                  No Quote Found, try another Date or Currency
                </WithStyles(Typography)>
              </div>
              <div>
                <WithStyles(Button)
                  className="refreshButton"
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "margin": "20px",
                    }
                  }
                  variant="contained"
                >
                  Refresh Quotes
                </WithStyles(Button)>
                <WithStyles(Button)
                  className="filterButton"
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "margin": "20px",
                    }
                  }
                  variant="contained"
                >
                  Filter
                </WithStyles(Button)>
                <React.Fragment />
              </div>
            </header>,
            <FooterComponent />,
          ],
          "className": "App",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="CardContainer"
                >
                  <WithStyles(Typography)
                    color="inherit"
                    noWrap={true}
                    variant="h6"
                  >
                    No Quote Found, try another Date or Currency
                  </WithStyles(Typography)>
                </div>,
                <div>
                  <WithStyles(Button)
                    className="refreshButton"
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "margin": "20px",
                      }
                    }
                    variant="contained"
                  >
                    Refresh Quotes
                  </WithStyles(Button)>
                  <WithStyles(Button)
                    className="filterButton"
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "margin": "20px",
                      }
                    }
                    variant="contained"
                  >
                    Filter
                  </WithStyles(Button)>
                  <React.Fragment />
                </div>,
              ],
              "className": "App-header",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <WithStyles(Typography)
                    color="inherit"
                    noWrap={true}
                    variant="h6"
                  >
                    No Quote Found, try another Date or Currency
                  </WithStyles(Typography)>,
                  "className": "CardContainer",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "No Quote Found, try another Date or Currency",
                    "color": "inherit",
                    "noWrap": true,
                    "variant": "h6",
                  },
                  "ref": null,
                  "rendered": "No Quote Found, try another Date or Currency",
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <WithStyles(Button)
                      className="refreshButton"
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "margin": "20px",
                        }
                      }
                      variant="contained"
                    >
                      Refresh Quotes
                    </WithStyles(Button)>,
                    <WithStyles(Button)
                      className="filterButton"
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "margin": "20px",
                        }
                      }
                      variant="contained"
                    >
                      Filter
                    </WithStyles(Button)>,
                    <React.Fragment />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Refresh Quotes",
                      "className": "refreshButton",
                      "color": "primary",
                      "onClick": [Function],
                      "style": Object {
                        "margin": "20px",
                      },
                      "variant": "contained",
                    },
                    "ref": null,
                    "rendered": "Refresh Quotes",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Filter",
                      "className": "filterButton",
                      "color": "primary",
                      "onClick": [Function],
                      "style": Object {
                        "margin": "20px",
                      },
                      "variant": "contained",
                    },
                    "ref": null,
                    "rendered": "Filter",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": Symbol(react.fragment),
                  },
                ],
                "type": "div",
              },
            ],
            "type": "header",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <WithStyles(CssBaseline) />,
          <div
            className="App"
          >
            <AppBarComponent />
            <header
              className="App-header"
            >
              <div
                className="CardContainer"
              >
                <WithStyles(Typography)
                  color="inherit"
                  noWrap={true}
                  variant="h6"
                >
                  No Quote Found, try another Date or Currency
                </WithStyles(Typography)>
              </div>
              <div>
                <WithStyles(Button)
                  className="refreshButton"
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "margin": "20px",
                    }
                  }
                  variant="contained"
                >
                  Refresh Quotes
                </WithStyles(Button)>
                <WithStyles(Button)
                  className="filterButton"
                  color="primary"
                  onClick={[Function]}
                  style={
                    Object {
                      "margin": "20px",
                    }
                  }
                  variant="contained"
                >
                  Filter
                </WithStyles(Button)>
                <React.Fragment />
              </div>
            </header>
            <FooterComponent />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <AppBarComponent />,
              <header
                className="App-header"
              >
                <div
                  className="CardContainer"
                >
                  <WithStyles(Typography)
                    color="inherit"
                    noWrap={true}
                    variant="h6"
                  >
                    No Quote Found, try another Date or Currency
                  </WithStyles(Typography)>
                </div>
                <div>
                  <WithStyles(Button)
                    className="refreshButton"
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "margin": "20px",
                      }
                    }
                    variant="contained"
                  >
                    Refresh Quotes
                  </WithStyles(Button)>
                  <WithStyles(Button)
                    className="filterButton"
                    color="primary"
                    onClick={[Function]}
                    style={
                      Object {
                        "margin": "20px",
                      }
                    }
                    variant="contained"
                  >
                    Filter
                  </WithStyles(Button)>
                  <React.Fragment />
                </div>
              </header>,
              <FooterComponent />,
            ],
            "className": "App",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="CardContainer"
                  >
                    <WithStyles(Typography)
                      color="inherit"
                      noWrap={true}
                      variant="h6"
                    >
                      No Quote Found, try another Date or Currency
                    </WithStyles(Typography)>
                  </div>,
                  <div>
                    <WithStyles(Button)
                      className="refreshButton"
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "margin": "20px",
                        }
                      }
                      variant="contained"
                    >
                      Refresh Quotes
                    </WithStyles(Button)>
                    <WithStyles(Button)
                      className="filterButton"
                      color="primary"
                      onClick={[Function]}
                      style={
                        Object {
                          "margin": "20px",
                        }
                      }
                      variant="contained"
                    >
                      Filter
                    </WithStyles(Button)>
                    <React.Fragment />
                  </div>,
                ],
                "className": "App-header",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <WithStyles(Typography)
                      color="inherit"
                      noWrap={true}
                      variant="h6"
                    >
                      No Quote Found, try another Date or Currency
                    </WithStyles(Typography)>,
                    "className": "CardContainer",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "No Quote Found, try another Date or Currency",
                      "color": "inherit",
                      "noWrap": true,
                      "variant": "h6",
                    },
                    "ref": null,
                    "rendered": "No Quote Found, try another Date or Currency",
                    "type": [Function],
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <WithStyles(Button)
                        className="refreshButton"
                        color="primary"
                        onClick={[Function]}
                        style={
                          Object {
                            "margin": "20px",
                          }
                        }
                        variant="contained"
                      >
                        Refresh Quotes
                      </WithStyles(Button)>,
                      <WithStyles(Button)
                        className="filterButton"
                        color="primary"
                        onClick={[Function]}
                        style={
                          Object {
                            "margin": "20px",
                          }
                        }
                        variant="contained"
                      >
                        Filter
                      </WithStyles(Button)>,
                      <React.Fragment />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Refresh Quotes",
                        "className": "refreshButton",
                        "color": "primary",
                        "onClick": [Function],
                        "style": Object {
                          "margin": "20px",
                        },
                        "variant": "contained",
                      },
                      "ref": null,
                      "rendered": "Refresh Quotes",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Filter",
                        "className": "filterButton",
                        "color": "primary",
                        "onClick": [Function],
                        "style": Object {
                          "margin": "20px",
                        },
                        "variant": "contained",
                      },
                      "ref": null,
                      "rendered": "Filter",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": Symbol(react.fragment),
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "header",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
